DEBUG=0
FRONTEND_SUPPORTS_RGB565=1
TILED_RENDERING=0
STATIC_LINKING=0
USE_CHEATS=1
USE_TWEAKS=1
USE_THREADED_RENDERER=0
USE_MOTION_SENSOR=0

CORE_DIR := .
BUILD_DIR = build

ifeq ($(platform),android_arm64-v8a)
include $(BUILD_DIR)/Makefile.android_arm64-v8a
else ifeq ($(platform),android_armeabi)
include $(BUILD_DIR)/Makefile.android_armeabi
else ifeq ($(platform),android_armeabi-v7a)
include $(BUILD_DIR)/Makefile.android_armeabi-v7a
else ifeq ($(platform),android_mips)
include $(BUILD_DIR)/Makefile.android_mips
else ifeq ($(platform),android_mips64)
include $(BUILD_DIR)/Makefile.android_mips64
else ifeq ($(platform),android_x86)
include $(BUILD_DIR)/Makefile.android_x86
else ifeq ($(platform),android_x86_64)
include $(BUILD_DIR)/Makefile.android_x86_64
else ifeq ($(platform),linux-portable_x86)
include $(BUILD_DIR)/Makefile.linux-portable_x86
else ifeq ($(platform),linux-portable_x86_64)
include $(BUILD_DIR)/Makefile.linux-portable_x86_64
else ifeq ($(platform),linux_x86)
include $(BUILD_DIR)/Makefile.linux_x86
else ifeq ($(platform),linux_x86_64)
include $(BUILD_DIR)/Makefile.linux_x86_64
else ifeq ($(platform),mingw_x86)
include $(BUILD_DIR)/Makefile.mingw_x86
else ifeq ($(platform),mingw_x86_64)
include $(BUILD_DIR)/Makefile.mingw_x86_64
else ifeq ($(platform),wii_ppc)
include $(BUILD_DIR)/Makefile.wii_ppc
else ifeq ($(platform),windows_x86)
include $(BUILD_DIR)/Makefile.windows_x86
else ifeq ($(platform),windows_x86_64)
include $(BUILD_DIR)/Makefile.windows_x86_64
else

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
   arch = intel
ifeq ($(shell uname -p),powerpc)
   arch = ppc
endif
else ifneq ($(findstring win,$(shell uname -a)),)
   platform = win
endif
endif

LIBRETRO_DIR := $(CORE_DIR)/libretro

# system platform
system_platform = unix
ifeq ($(shell uname -a),)
EXE_EXT = .exe
   system_platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   system_platform = osx
   arch = intel
ifeq ($(shell uname -p),powerpc)
   arch = ppc
endif
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   system_platform = win
endif

TARGET_NAME := vba_next
ENDIANNESS_DEFINES :=

ifeq ($(STATIC_LINKING),1)
EXT=a

ifeq ($(platform), unix)
PLAT=_unix
endif
endif

PTHREAD_FLAGS=
ifneq ($(platform), osx)
ifeq ($(USE_THREADED_RENDERER), 1)
   ifeq ($(findstring Haiku,$(shell uname -a)),)
      PTHREAD_FLAGS = -lpthread
   endif
endif
endif

# UNIX
ifeq ($(platform), unix)
	EXT    ?= so
   TARGET := $(TARGET_NAME)_libretro$(PLAT).$(EXT)
   fpic := -fPIC
   SHARED := -shared -Wl,-version-script=$(LIBRETRO_DIR)/link.T -Wl,-no-undefined
	TILED_RENDERING=1
   LDFLAGS += $(PTHREAD_FLAGS)

# OS X
else ifeq ($(platform), osx)
	EXT    ?= dylib
	TARGET := $(TARGET_NAME)_libretro.$(EXT)
   fpic := -fPIC
ifeq ($(arch),ppc)
   ENDIANNESS_DEFINES += -DMSB_FIRST
   PLATFORM_DEFINES := -D__POWERPC__ -D__ppc__
endif
   OSXVER = `sw_vers -productVersion | cut -d. -f 2`
   OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
   fpic += -mmacosx-version-min=10.2
   SHARED := -dynamiclib
	TILED_RENDERING=1

# iOS
else ifneq (,$(findstring ios,$(platform)))
	EXT    ?= dylib
	TARGET := $(TARGET_NAME)_libretro_ios.$(EXT)
   fpic := -fPIC
   SHARED := -dynamiclib

ifeq ($(IOSSDK),)
   IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
endif

   CC = cc -arch armv7 -isysroot $(IOSSDK)
   CXX = c++ -arch armv7 -isysroot $(IOSSDK)
   CFLAGS += -DIOS
ifeq ($(platform),ios9)
	CC     += -miphoneos-version-min=8.0
	CXX    += -miphoneos-version-min=8.0
	CFLAGS += -miphoneos-version-min=8.0
else
   CC     += -miphoneos-version-min=5.0
   CXX    += -miphoneos-version-min=5.0
   CFLAGS += -miphoneos-version-min=5.0
endif
	TILED_RENDERING=1

# Theos iOS
else ifeq ($(platform), theos_ios)
DEPLOYMENT_IOSVERSION = 5.0
TARGET = iphone:latest:$(DEPLOYMENT_IOSVERSION)
ARCHS = armv7 armv7s
TARGET_IPHONEOS_DEPLOYMENT_VERSION=$(DEPLOYMENT_IOSVERSION)
THEOS_BUILD_DIR := objs
include $(THEOS)/makefiles/common.mk

LIBRARY_NAME = $(TARGET_NAME)_libretro_ios
	TILED_RENDERING=1

# QNX
else ifeq ($(platform), qnx)
	EXT    ?= so
	TARGET := $(TARGET_NAME)_libretro_$(platform).$(EXT)
   fpic := -fPIC
   SHARED := -lcpp -lm -shared -Wl,-version-script=$(LIBRETRO_DIR)/link.T -Wl,-no-undefined
	CC = qcc -Vgcc_ntoarmv7le
	CXX = QCC -Vgcc_ntoarmv7le_cpp
	AR = QCC -Vgcc_ntoarmv7le
	PLATFORM_DEFINES := -D__BLACKBERRY_QNX__ -marm -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp
	TILED_RENDERING=1

# PS3
else ifeq ($(platform), ps3)
	EXT=a
	TARGET := $(TARGET_NAME)_libretro_$(platform).$(EXT)
   CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
   ENDIANNESS_DEFINES += -DMSB_FIRST
   PLATFORM_DEFINES := -D__CELLOS_LV2__ -D__POWERPC__ -D__ppc__ -DUSE_CACHE_PREFETCH -DBRANCHLESS_GBA_GFX
   STATIC_LINKING = 1
	TILED_RENDERING=1

# PS3 (SNC)
else ifeq ($(platform), sncps3)
	EXT=a
	TARGET := $(TARGET_NAME)_libretro_ps3.$(EXT)
   CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
   CXX = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
   AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe
   ENDIANNESS_DEFINES += -DMSB_FIRST
   PLATFORM_DEFINES := -D__CELLOS_LV2__ -D__POWERPC__ -D__ppc__ -DUSE_CACHE_PREFETCH -DBRANCHLESS_GBA_GFX
   STATIC_LINKING = 1
	TILED_RENDERING=1

# Lightweight PS3 Homebrew SDK
else ifeq ($(platform), psl1ght)
   TARGET := $(TARGET_NAME)_libretro_psl1ght.a
   CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
   CXX = $(PS3DEV)/ppu/bin/ppu-g++$(EXE_EXT)
   AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
   ENDIANNESS_DEFINES += -DMSB_FIRST
   PLATFORM_DEFINES := -D__CELLOS_LV2__ -D__POWERPC__ -D__ppc__ -DUSE_CACHE_PREFETCH -DBRANCHLESS_GBA_GFX
   STATIC_LINKING = 1
	TILED_RENDERING=1

# PSP1
else ifeq ($(platform), psp1)
	EXT=a
	TARGET := $(TARGET_NAME)_libretro_$(platform).$(EXT)
	CC = psp-gcc$(EXE_EXT)
	CXX = psp-g++$(EXE_EXT)
	AR = psp-ar$(EXE_EXT)
	PLATFORM_DEFINES := -DBRANCHLESS_GBA_GFX -DPSP
	CFLAGS += -G0
	CXXFLAGS += -G0
   STATIC_LINKING = 1
	TILED_RENDERING=1

# Vita
else ifeq ($(platform), vita)
	EXT=a
	TARGET := $(TARGET_NAME)_libretro_$(platform).$(EXT)
	CC = arm-vita-eabi-gcc$(EXE_EXT)
	CXX = arm-vita-eabi-g++$(EXE_EXT)
	AR = arm-vita-eabi-ar$(EXE_EXT)
	PLATFORM_DEFINES := -DBRANCHLESS_GBA_GFX -DVITA
	__FLAGS := -marm -mtune=cortex-a9 -mcpu=cortex-a9 -mfloat-abi=hard -mword-relocations
	__FLAGS += -fno-optimize-sibling-calls -fno-strict-aliasing -fno-partial-inlining -fno-tree-vrp
	__FLAGS += -ffast-math -fsingle-precision-constant -fprofile-use

	CFLAGS += $(__FLAGS)
	CXXFLAGS += $(__FLAGS)
	CXXFLAGS += -fno-exceptions -fno-rtti 
   STATIC_LINKING = 1
	TILED_RENDERING=1
	USE_CHEATS=0 #for performance boost.
	USE_TWEAKS=1
	USE_THREADED_RENDERER=1
	USE_MOTION_SENSOR=1
# Libxenon
else ifeq ($(platform), xenon)
	EXT=a
   TARGET := $(TARGET_NAME)_libretro_xenon360.$(EXT)
   CC = xenon-gcc$(EXE_EXT)
   CXX = xenon-g++$(EXE_EXT)
   AR = xenon-ar$(EXE_EXT)
   ENDIANNESS_DEFINES += -DMSB_FIRST
   PLATFORM_DEFINES := -D__LIBXENON__ -D__POWERPC__ -D__ppc__
   STATIC_LINKING = 1
	TILED_RENDERING=1

# Nintendo Game Cube
else ifeq ($(platform), ngc)
	EXT=a
	TARGET := $(TARGET_NAME)_libretro_$(platform).$(EXT)
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
   ENDIANNESS_DEFINES += -DMSB_FIRST
   PLATFORM_DEFINES += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float -D__ppc__
   STATIC_LINKING = 1
	TILED_RENDERING=1

# Nintendo Wii
else ifeq ($(platform), wii)
	EXT=a
	TARGET := $(TARGET_NAME)_libretro_$(platform).$(EXT)
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
   ENDIANNESS_DEFINES += -DMSB_FIRST
   PLATFORM_DEFINES += -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -D__ppc__
   STATIC_LINKING = 1
	TILED_RENDERING=1

else ifneq (,$(findstring armv,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.so
   SHARED := -shared -Wl,--no-undefined
	TILED_RENDERING=1
   fpic := -fPIC
ifneq (,$(findstring cortexa8,$(platform)))
   PLATFORM_DEFINES += -marm -mcpu=cortex-a8
else ifneq (,$(findstring cortexa9,$(platform)))
   PLATFORM_DEFINES += -marm -mcpu=cortex-a9
endif
   PLATFORM_DEFINES += -marm
ifneq (,$(findstring neon,$(platform)))
   PLATFORM_DEFINES += -mfpu=neon
   HAVE_NEON = 1
endif
ifneq (,$(findstring softfloat,$(platform)))
   PLATFORM_DEFINES += -mfloat-abi=softfp
else ifneq (,$(findstring hardfloat,$(platform)))
   PLATFORM_DEFINES += -mfloat-abi=hard
endif
   PLATFORM_DEFINES += -DARM

# Emscripten
else ifeq ($(platform), emscripten)
	EXT    ?= bc
	TARGET := $(TARGET_NAME)_libretro_$(platform).$(EXT)
   STATIC_LINKING = 1

# Windows
else
	EXT    ?= dll
	TARGET := $(TARGET_NAME)_libretro.$(EXT)
   CC = gcc
   CXX = g++
   SHARED := -shared -static-libgcc -static-libstdc++ -Wl,-no-undefined -Wl,-version-script=$(LIBRETRO_DIR)/link.T
	TILED_RENDERING=1
endif

ifeq ($(STATIC_LINKING),1)
SHARED=
fpic=
endif

ifeq ($(TILED_RENDERING), 1)
DEFINES += -DTILED_RENDERING
endif

ifeq ($(DEBUG), 1)
	CFLAGS += -O0 -g
	CXXFLAGS += -O0 -g
else
	CFLAGS += -O3
	CXXFLAGS += -O3
endif

include build/Makefile.common

OBJECTS := $(SOURCES_CXX:.cpp=.o) $(SOURCES_C:.c=.o)

DEFINES += -D__LIBRETRO__ $(ENDIANNESS_DEFINES) $(PLATFORM_DEFINES) -DHAVE_STDINT_H -DHAVE_INTTYPES_H -DINLINE=inline -DHAVE_HLE_BIOS

CFLAGS += $(CODE_DEFINES) $(fpic) $(DEFINES)
CXXFLAGS += $(fpic) $(DEFINES)

ifeq ($(FRONTEND_SUPPORTS_RGB565), 1)
CFLAGS += -DFRONTEND_SUPPORTS_RGB565
CXXFLAGS += -DFRONTEND_SUPPORTS_RGB565
endif

ifeq ($(USE_CHEATS), 1)
CFLAGS += -DUSE_CHEATS
CXXFLAGS += -DUSE_CHEATS
endif

ifeq ($(USE_TWEAKS), 1)
CFLAGS += -DUSE_TWEAKS
CXXFLAGS += -DUSE_TWEAKS
endif

ifeq ($(USE_THREADED_RENDERER), 1)
CFLAGS += -DTHREADED_RENDERER
CXXFLAGS += -DTHREADED_RENDERER
endif

ifeq ($(USE_MOTION_SENSOR), 1)
CFLAGS += -DUSE_MOTION_SENSOR
CXXFLAGS += -DUSE_MOTION_SENSOR
endif

LIBS :=

%.o: %.cpp
	$(CXX) -c -o $@ $< $(CXXFLAGS) $(INCFLAGS)

%.o: %.c
	$(CC) -c -o $@ $< $(CFLAGS) $(INCFLAGS)

ifeq ($(platform), theos_ios)
COMMON_FLAGS := -DIOS $(COMMON_DEFINES) $(INCFLAGS) -I$(THEOS_INCLUDE_PATH) -Wno-error
$(LIBRARY_NAME)_CFLAGS += $(CFLAGS) $(COMMON_FLAGS)
$(LIBRARY_NAME)_CXXFLAGS += $(CXXFLAGS) $(COMMON_FLAGS)
${LIBRARY_NAME}_FILES = $(SOURCES_CXX) $(SOURCES_C)
include $(THEOS_MAKE_PATH)/library.mk
else
all: $(TARGET)

$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
else
	$(CXX) -o $@ $(SHARED) $(OBJECTS) $(LDFLAGS) $(LIBS)
endif

clean-objs:
	rm -f $(OBJECTS)

clean:
	rm -f $(OBJECTS)
	rm -f $(TARGET)

.PHONY: clean clean-objs
endif

endif
